---
# создание переменных для облегчения переноса на другие модули
- name: "register variables"
  set_fact:
    module_name="{{ mbfinance.dirs.module }}"
    config_path_production="{{ billing.dirs.home }}/{{ mbfinance.dirs.module }}/{{ mbfinance.dirs.production }}/{{ mbfinance.dirs.config }}/{{ mbfinance.files.config }}"
    config_path_testing="{{ billing.dirs.home }}/{{ mbfinance.dirs.module }}/{{ mbfinance.dirs.testing }}/{{ mbfinance.dirs.config }}/{{ mbfinance.files.config }}"
    configuration="{{ mbfinance.software.database }}"

# создание переменных для удобства
- name: "register mysql_user"
  set_fact: mysql_user="{{ configuration.mysql_user }}"

- name: "register mysql_role"
  set_fact: mysql_role="{{ configuration.mysql_role }}"

- name: "register custom_pass"
  set_fact: custom_pass="{{ configuration.mysql_pass }}"

- name: "register client_ip"
  set_fact: client_ip="{{ configuration.client_ip }}"

- name: "register client_ip"
  set_fact: client_ip="{{ ansible_default_ipv4.address }}"
  when: configuration.use_ansible_default_ipv4

- name: "register client_ip"
  set_fact: client_ip="127.0.0.1"
  when: billing.mysql_server == "127.0.0.1" or billing.mysql_server == "localhost"

# проверяем был ли создан пароль ранее
- name: "check if password already generated"
  stat:
    path: "{{ billing.dirs.tmp }}/{{ module_name }}_password"
  register: mysql_pass_generated

# генерируем пароль юзера если он пустой
- name: "generate password"
  shell: "bash roles/generatepasswd.sh > {{ billing.dirs.tmp }}/{{ module_name }}_password"
  when: mysql_pass_generated.stat.exists == False

# копируем сгенерированный пароль
- name: "copy password into variable"
  set_fact:
    mysql_pass: "{{ lookup('file', '{{ billing.dirs.tmp }}/{{ module_name }}_password') }}"
  when: custom_pass == ""

# копируем введенный пароль юзера
- name: "copy password into variable"
  set_fact:
    mysql_pass: "{{ custom_pass }}"
  when: custom_pass != ""

# создаем файл с информацией создания абонента
- name: "create {{ billing.dirs.home }}/sql_{{ module_name }}.info"
  file:
    path: "{{ billing.dirs.home }}/sql_{{ module_name }}.info"
    state: touch

# записываем запросы для создания абонента
- name: "save to file {{ billing.dirs.home }}/sql_{{ module_name }}.info"
  copy:
    dest: "{{ billing.dirs.home }}/sql_{{ module_name }}.info"
    mode: 0700
    content: |
      You will need to create MySQL user for {{ module_name }} by yourself and configure MySQL connection in config
      {{ config_path_production }}
      {{ config_path_testing }}
      Example:
      CREATE USER '{{ mysql_user }}'@'{{ mysql_user }}' IDENTIFIED WITH mysql_native_password BY '{{ mysql_pass }}' REQUIRE NONE;
      GRANT '{{ mysql_role }}' TO '{{ mysql_user }}'@'{{ user_host }}';
      SET DEFAULT ROLE '{{ mysql_role }}' TO '{{ mysql_user }}'@'{{ user_host }}';
      FLUSH PRIVILEGES;

# заменяем пароль в конфиге
- name: "replace mysql password"
  replace:
    path: "{{ config_path_production }}"
    regexp: "{password}"
    replace: "{{ mysql_pass }}"
  no_log: true
  when: mysql_pass is defined

- name: "replace mysql password"
  replace:
    path: "{{ config_path_testing }}"
    regexp: "{password}"
    replace: "{{ mysql_pass }}"
  no_log: true
  when: mysql_pass is defined
