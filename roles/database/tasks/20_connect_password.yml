---
- name: "custom root password"
  block:
    - name: "copy root password into variable"
      set_fact:
        root_passwd: "{{ mysql.pass }}"
  when: mysql.pass != ''

- name: "check if password already generated"
  stat:
    path: "{{ billing.dirs.tmp }}/mysql_password"
  register: mysql_password

- name: "generate password"
  block:
    - name: "generate new password"
      shell: "bash roles/generatepasswd.sh > {{ billing.dirs.tmp }}/mysql_password"
      when:
        - mysql_password.stat.exists == False
        - OS.database.percona.version == 80 or OS.database.percona.version == 8.0

    - name: "save password into variable"
      set_fact:
        root_passwd: "{{ lookup('file', '{{ billing.dirs.tmp }}/mysql_password') }}"
  when:
    - mysql.pass == ''
    - mysql_password.stat.exists == false

- name: "save password into variable"
  set_fact:
    root_passwd: "{{ lookup('file', '{{ billing.dirs.tmp }}/mysql_password') }}"
  when:
    - mysql_password.stat.exists == true
    - mysql.pass == ''

- name: "check if mysql.connect already generated"
  stat:
    path: "{{ billing.mysql_connect }}"
  register: mysql_connect

- name: "make local mysql.connect for mysql connection"
  template:
    src: local.cnf
    dest: "{{ billing.mysql_connect }}"
    mode: '0600'
  when: mysql_connect.stat.exists == False and billing.mysql_server == '127.0.0.1'

- name: "make remote mysql.connect for mysql connection"
  template:
    src: remote.cnf
    dest: "{{ billing.mysql_connect }}"
    mode: '0600'
  when:
    - mysql_connect.stat.exists == False and billing.mysql_server != '127.0.0.1'
    - mysql.pass != ''
